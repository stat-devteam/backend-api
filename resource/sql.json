{
    "link_get_list": {
        "queryString": "SELECT l.*, s.name as svc_name, s.description as svc_desc, sg.name as sg_name from link l LEFT OUTER JOIN service s ON l.svc_id = s.svc_num LEFT OUTER JOIN service_group sg ON l.svc_grp_id = sg.svc_grp_id WHERE l.reg_dt BETWEEN ? AND ? AND l.svc_grp_id IN (?) ORDER BY reg_dt;",
        "params": ["start_date", "end_date", "svc_grp_id"],
        "desc": "link get list by date_range"
    },
    "link_get_list_count": {
        "queryString": "SELECT count(*) as count from link WHERE reg_dt BETWEEN ? AND ? AND svc_grp_id IN (?)",
        "params": ["start_date", "end_date", "svc_grp_id"],
        "desc": "link get total count by date_range"
    },
    "service_group_get_all": {
        "queryString": "SELECT * FROM service_group",
        "params": [],
        "desc": "service_group get ALL"
    },
    "service_get": {
        "queryString": "SELECT * FROM service WHERE svc_num = ?",
        "params": ["svc_num"],
        "desc": "service get"
    },
    "check_link": {
        "queryString": "SELECT * FROM link WHERE mbr_id = ? AND mbr_grp_id = ?",
        "params": ["memberId", "memberGroupId"],
        "desc": "이미 링크 생성되어 있는지 확인"
    },
    "check_hk_klayton": {
        "queryString": "SELECT * FROM klaytn_account WHERE accnt_id = (SELECT accnt_id FROM service WHERE svc_num = ? )",
        "params": ["serviceNumber"],
        "desc": "해당 serviceNumber 한경 클레이튼 계정 확인"
    },
    "insert_memo": {
        "queryString": "INSERT INTO svc_memo(memo) VALUES( ? )",
        "params": ["memo"],
        "desc": "새 메모 추가"
    },
    "insert_transfer": {
        "queryString": "INSERT INTO transfer(type, svc_num, link_num, amount, fee, transfer_reg_dt, transfer_end_dt, tx_hash, tx_status, job_status, job_fetched_dt, svc_callback_seq, svc_memo_seq, link_accnt_before_balance, klip_address) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
        "params": ["transferType", "serviceNumber", "linkNumber", "pebAmount", "fee", "now", "transferEndDate", "txHash", "txStatus", "jobStatus", "now", "serviceCallbackId", "memoSeq", "currentBalance", "klip_address"],
        "desc": "클레이 전송 후, transfer insert"
    },
    "update_transfer": {
        "queryString": "UPDATE transfer SET tx_status = ?, transfer_end_dt = now(), job_status = 'done', fee= ? WHERE transfer_seq = ?",
        "params": ["newStatus", "completeDate", "transferSeq"],
        "desc": "polling 이후 transfer update fee를 이 시점에 알 수 있다."
    },
    "update_transfer_tx_job_fee_hash": {
        "queryString": "UPDATE transfer SET tx_status = ?, job_status =?, fee =?, tx_hash = ?, transfer_end_dt = now() WHERE transfer_seq = ?",
        "params": ["tx_status", "job_status", "fee", "tx_hash", "completeDate", "transferSeq"],
        "desc": "tx_status, job_status, fee update"
    },
    "update_transfer_tx_job_hash": {
        "queryString": "UPDATE transfer SET tx_status = ?, job_status =?, tx_hash = ?, transfer_end_dt = now() WHERE transfer_seq = ?",
        "params": ["tx_status", "job_status", "tx_hash", "completeDate", "transferSeq"],
        "desc": "tx_status, job_status, fee update"
    },
    "update_transfer_tx_job": {
        "queryString": "UPDATE transfer SET tx_status = ?, job_status =?, transfer_end_dt = now() WHERE transfer_seq = ?",
        "params": ["tx_status", "job_status", "completeDate", "transferSeq"],
        "desc": "tx_status, job_status, fee update"
    },
    "transfer_status": {
        "queryString": "SELECT * FROM transfer WHERE transfer_seq =?",
        "params": ["transferId"],
        "desc": "Async 배치 작업 이후 tx status check"
    },
    "reward_que_insert": {
        "queryString": "INSERT INTO reward_queue(svc_num, mbr_id, mbr_grp_id, amount, reg_dt, reserve_dt, expire_dt, job_status, job_fetched_dt, svc_callback_seq, svc_memo_seq) VALUES (?,?,?,?, now(),?,?,?,?,?,?)",
        "params": ["svc_num, mbr_id, mbr_grp_id, amount, reserve_dt, expire_dt, job_status, job_fetched_dt, svc_callback_seq, svc_memo_seq"],
        "desc": "promise reward 큐 생성"
    },
    "service_callback_insert": {
        "queryString": "INSERT INTO service_callback(callback_status, callback_url) VALUES ('ready' , ?)",
        "params": ["callback_url"],
        "desc": "service callback insert with ready status"
    },
    "service_get": {
        "queryString": "SELECT * FROM service WHERE svc_num = ?",
        "params": ["svc_num"],
        "desc": "service get"
    },
    "transfer_status_update": {
        "queryString": "UPDATE transfer SET tx_status = ?, job_status = ? WHERE transfer_seq = ?",
        "params": ["tx_status", "job_status", "transferSeq"],
        "desc": "transfer update tx_status, job_status"
    },
    "transfer_status_hash_update": {
        "queryString": "UPDATE transfer SET tx_status = ?, job_status = ?, tx_hash = ? WHERE transfer_seq = ?",
        "params": ["tx_status", "job_status", "tx_hash", "transferSeq"],
        "desc": "transfer update tx,job,hash"
    },
    "error_log_insert": {
        "queryString": "INSERT INTO error_log(type,code,message) VALUES (?,?,?)",
        "params": ["type", "code", "message"],
        "desc": "insert new error_log"
    },
    "reward_log_update": {
        "queryString": "UPDATE reward_queue SET log_seq = ? WHERE rwd_q_seq = ?",
        "params": ["log_seq", "rwd_q_seq"],
        "desc": "reward_log_update"
    },
    "transfer_log_update": {
        "queryString": "UPDATE transfer SET log_seq = ? WHERE transfer_seq = ?",
        "params": ["log_seq", "transfer_seq"],
        "desc": "transfer_log_update"
    },
    "klaytn_account_get_by_accnt_id": {
        "queryString": "select * from klaytn_account where accnt_id = ?",
        "params": ["accnt_id"],
        "desc": "klaytn_account_get_by_accnt_id"
    },
    "link_cancel_insert": {
        "queryString": "INSERT INTO link_cancel (link_num,mbr_grp_id,mbr_id,klip_address,reg_dt,svc_grp_id,svc_id,klip_new) VALUES (?,?,?,?,?,?,?,?)",
        "params": ["link_num", "mbr_grp_id", "mbr_id", "klip_address", "reg_dt", "svc_grp_id", "svc_id", "klip_new"],
        "desc": "link_cancel insert"
    },
    "link_delete": {
        "queryString": "DELETE FROM link WHERE mbr_id= ? AND mbr_grp_id=?",
        "params": ["mbr_id", "mbr_grp_id"],
        "desc": "link delete"
    },
    "link_temp_delete": {
        "queryString": "DELETE FROM link_temp WHERE mbr_id= ? AND mbr_grp_id=?",
        "params": ["mbr_id", "mbr_grp_id"],
        "desc": "link delete"
    },
    "link_cancel_delete": {
        "queryString": "DELETE FROM link_cancel WHERE mbr_id= ? AND mbr_grp_id=?",
        "params": ["mbr_id", "mbr_grp_id"],
        "desc": "link delete"
    },
    "link_cancel_get": {
        "queryString": "SELECT * FROM link_cancel WHERE mbr_id= ? AND mbr_grp_id=?",
        "params": ["mbr_id", "mbr_grp_id"],
        "desc": "link cancel get"
    },
    "link_insert": {
        "queryString": "INSERT INTO link(link_num, mbr_grp_id, mbr_id, klip_address, reg_dt, svc_grp_id, svc_id, klip_new) VALUES(?,?,?,?,?,?,?,?)",
        "params": ["link_num", "mbr_grp_id", "mbr_id", "klip_address", "reg_dt", "svc_grp_id", "svc_id", "klip_new"],
        "desc": "link create"
    },
    "link_info_get": {
        "queryString": "SELECT l.*, s.name as svc_name, s.description as svc_desc,sg.name as svc_grp_name from link l left outer join service s on  l.svc_id = s.svc_num left outer join service_group sg on l.svc_grp_id = sg.svc_grp_id WHERE l.mbr_id=? AND l.mbr_grp_id=? order by reg_dt desc",
        "params": ["mbr_id", "mbr_grp_id"],
        "desc": "link get by mbr_grp_id and mbr_id"
    },
    "link_temp_info_list_get": {
        "queryString": "SELECT l.*, s.name as svc_name, s.description as svc_desc,sg.name as svc_grp_name from link_temp l left outer join service s on  l.svc_id = s.svc_num left outer join service_group sg on l.svc_grp_id = sg.svc_grp_id WHERE l.mbr_id=? AND l.mbr_grp_id=? order by reg_dt desc",
        "params": ["mbr_id", "mbr_grp_id"],
        "desc": "link temp get by mbr_grp_id and mbr_id"
    },
    "transfer_info_list_get": {
        "queryString": "SELECT t.*, s.name as svc_name, s.description as svc_desc,sg.name as svc_grp_name, el.type as log_type, el.code as log_code, el.message as log_message FROM transfer t LEFT OUTER JOIN error_log el on t.log_seq = el.log_seq INNER JOIN link l ON l.mbr_grp_id= ? AND l.mbr_id= ? INNER JOIN service s ON t.svc_num = s.svc_num INNER JOIN service_group sg ON sg.svc_grp_id = s.svc_grp_id WHERE t.link_num=l.link_num  ORDER BY t.transfer_reg_dt DESC;",
        "params": ["mbr_grp_id", "mbr_id"],
        "desc": "transfer get by mbr_grp_id and mbr_id"
    },
    "nft_log_update": {
        "queryString": "UPDATE nft SET log_seq = ? WHERE nft_seq = ?",
        "params": ["log_seq", "nft_seq"],
        "desc": "nft_log_update"
    },
    "link_check_registered": {
        "queryString": "SELECT link_num, mbr_grp_id,convert(mbr_id, CHAR CHARACTER SET utf8) as mbr_id, klip_address, reg_dt, svc_grp_id, svc_id, klip_new FROM link WHERE  mbr_id= ? AND mbr_grp_id=?",
        "params": ["mbr_id", "mbr_grp_id"],
        "desc": "link check registered"
    },
    "nft_validation_by_mbr_id": {
        "queryString": "select * from nft where link_num = (select link_num from link l where l.mbr_id =? and l.mbr_grp_id =?) and trader_id=? and tx_status='success' and expire_dt >= NOW()",
        "params": ["mbr_id", "mbr_grp_id", "trader_id"],
        "desc": "nft_validation_by_mbr_id 유저 -> 게시글 보기 -> NFT있는지 확인"
    },
    "nft_validation_list_all": {
        "queryString": "select * from nft where tx_status = 'success' and expire_dt >= NOW()",
        "params": [""],
        "desc": "nft_validation_list_all (NFT notification Sync)"
    },
    "nft_validation_list_all_by_trader_id": {
        "queryString": "select * from nft where tx_status = 'success' and trader_id= ? and expire_dt >= NOW()",
        "params": ["trader_id"],
        "desc": "nft_validation_list_all_by_trader_id (NFT notification Sync)"
    },
    "nft_validation_list_page": {
        "queryString": "select a.* from (select nft_Seq from nft where tx_status='success' and expire_dt >= NOW() limit ?,?) b join nft a on a.nft_Seq=b.nft_Seq",
        "params": ["page_offset", "page_size"],
        "desc": "nft_validation_list_all_by_trader_id (NFT notification Sync)"
    },
    "nft_validation_list_page_count": {
        "queryString": "select count(*) as count from (select nft_Seq from nft where tx_status='success' and expire_dt >= NOW()) b join nft a on a.nft_Seq=b.nft_Seq",
        "params": ["page_offset", "page_size"],
        "desc": "nft_validation_list_page_count (NFT notification Sync)"
    },
    "nft_validation_list_page_by_trader_id": {
        "queryString": "select a.* from (select nft_Seq from nft where tx_status='success' and expire_dt >= NOW() and trader_id=? limit ?,?) b join nft a on a.nft_Seq=b.nft_Seq",
        "params": ["trader_id", "page_offset", "page_size"],
        "desc": "nft_validation_list_all_by_trader_id (NFT notification Sync)"
    },
    "nft_validation_list_page_by_trader_id_count": {
        "queryString": "select count(*) as count from (select nft_Seq from nft where tx_status='success' and expire_dt >= NOW() and trader_id=?) b join nft a on a.nft_Seq=b.nft_Seq",
        "params": ["trader_id"],
        "desc": "nft_validation_list_all_by_trader_id (NFT notification Sync)"
    },
    "nft_token_get_from_trader": {
        "queryString": "select * from nft_token nt join trader_publisher tp on nt.publisher_id = tp.id join link l on tp.link_num = l.link_num where l.mbr_id = ? and l.mbr_grp_id = ? and nt.owner = ?",
        "params": ["mbr_id", "mbr_grp_id", "klip_address"],
        "desc": "nft_token_get_from_trader"
    },
    "nft_token_all_from_trader": {
        "queryString": "select * from nft_token nt join trader_publisher tp on nt.publisher_id = tp.id join link l on tp.link_num = l.link_num where l.mbr_id = ?",
        "params": ["mbr_id"],
        "desc": "nft_token_all_from_trader"
    },
    "nft_token_all": {
        "queryString": "select * from nft_token nt",
        "params": [""],
        "desc": "nft_token_all"
    },
    "nft_token_list_page_by_trader_id": {
        "queryString": "select * from nft_token nt join trader_publisher tp on nt.publisher_id = tp.id join link l on tp.link_num = l.link_num where l.mbr_id = ? limit ?, ?",
        "params": ["mbr_id", "page_offset", "page_size"],
        "desc": "nft_token_list_page_by_trader_id"
    },
    "nft_token_list_page_by_trader_id_count": {
        "queryString": "select count(*) as count from nft_token nt join trader_publisher tp on nt.publisher_id = tp.id join link l on tp.link_num = l.link_num where l.mbr_id = ?",
        "params": ["mbr_id"],
        "desc": "nft_token_list_page_by_trader_id"
    },
    "nft_token_list_page": {
        "queryString": "select * from nft_token nt limit ?, ?",
        "params": ["page_offset", "page_size"],
        "desc": "nft_token_list_page"
    },
    "nft_token_list_page_count": {
        "queryString": "select count(*) as count from nft_token nt",
        "params": [""],
        "desc": "nft_token_list_page_count"
    },
    "nft_token_list_by_member_trader": {
        "queryString": "select * from nft_token nt where owner = (select klip_address from link where mbr_id= ? and mbr_grp_id=?) and publisher_id in (select publisher_id from trader_publisher where link_num = ( select link_num from link where mbr_id= ? and mbr_grp_id=?)) limit 1;",
        "params": ["mbr_id", "mbr_grp_id", "trader_id", "mbr_grp_id"],
        "desc": "해당 멤버가 해당 트레이더의 nft를 소유하고있는지 확인"
    },
    "nft_token_by_token_id": {
        "queryString": "select nt.token_id, nt.token_uri, nt.owner as owner_address, nt.name, nt.description, nt.image, nt.attributes, convert(l.mbr_id, CHAR CHARACTER SET utf8) as owner_mbr_id, l.mbr_grp_id as owner_mbr_grp_id, nt.updated_at from (select * from nft_token where token_id = ?) nt left outer join link l on nt.owner = l.klip_address",
        "params": ["token_id"],
        "desc": "toekn 상세 조회"
    },
    "nft_token_list_all": {
        "queryString": "select nt.token_id, nt.token_uri, nt.owner as owner_address, nt.name, nt.description, nt.image, nt.attributes, convert(l.mbr_id, CHAR CHARACTER SET utf8) as owner_mbr_id, l.mbr_grp_id as owner_mbr_grp_id, nt.updated_at from nft_token nt left outer join link l on nt.owner = l.klip_address where nt.mbr_grp_id = ? limit ?,?",
        "params": ["mbr_grp_id", "pageOffset", "pageSize"],
        "desc": "nft 전체 조회 by mbr_grp_id"
    },
    "nft_token_list_all_count": {
        "queryString": "select count(*) as total from nft_token nt left outer join link l on nt.owner = l.klip_address where nt.mbr_grp_id = ?",
        "params": ["mbr_grp_id"],
        "desc": "nft 전체 totalCount by mbr_grp_id"
    },
    "nft_token_list_member": {
        "queryString": "select nt.token_id, nt.token_uri, nt.owner as owner_address, nt.name, nt.description, nt.image, nt.attributes, convert(l.mbr_id, CHAR CHARACTER SET utf8) as owner_mbr_id, l.mbr_grp_id as owner_mbr_grp_id, nt.updated_at from nft_token nt left outer join link l on nt.owner = l.klip_address where nt.mbr_grp_id = ? and l.mbr_id=? and l.mbr_grp_id =? limit ?,?",
        "params": ["mbr_grp_id", "mbr_id", "mbr_grp_id", "pageOffset", "pageSize"],
        "desc": "nft 멤버 조회 by mbr_grp_id"
    },
    "nft_token_list_member_count": {
        "queryString": "select count(*) total from nft_token nt left outer join link l on nt.owner = l.klip_address where nt.mbr_grp_id =? and l.mbr_id=? and l.mbr_grp_id =?",
        "params": ["mbr_grp_id", "mbr_id", "mbr_grp_id"],
        "desc": "nft 멤버 totalCount by mbr_grp_id"
    },
    "nft_token_list_trader": {
        "queryString": "select nt.token_id, nt.token_uri, nt.owner as owner_address, nt.name, nt.description, nt.image, nt.attributes, convert(l.mbr_id, CHAR CHARACTER SET utf8) as owner_mbr_id, l.mbr_grp_id as owner_mbr_grp_id, nt.updated_at from (select * from nft_token sub_nt where publisher_id in (select id from trader_publisher sub_tp where sub_tp.link_num = (select link_num from link sub_l where sub_l.mbr_id=? and sub_l.mbr_grp_id=?))) nt left outer join link l on nt.owner = l.klip_address where nt.mbr_grp_id = ? limit ?,?",
        "params": ["trader_id", "mbr_grp_id", "mbr_grp_id", "pageOffset", "pageSize"],
        "desc": "nft 트레이더가 발행한 조회 by mbr_grp_id"
    },
    "nft_token_list_trader_count": {
        "queryString": "select count(*) total from (select * from nft_token sub_nt where publisher_id in (select id from trader_publisher sub_tp where sub_tp.link_num = (select link_num from link sub_l where sub_l.mbr_id=? and sub_l.mbr_grp_id=?))) nt left outer join link l on nt.owner = l.klip_address where nt.mbr_grp_id = ?",
        "params": ["trader_id", "mbr_grp_id", "mbr_grp_id"],
        "desc": "nft 트레이더가 발행한 totalCount by mbr_grp_id"
    },
    "nft_history_list_from_cursor": {
        "queryString": "select * from nft_history nh where trader_mbr_grp_id = ? and id > ? limit ?",
        "params": ["mbr_grp_id", "cursor_id", "cursor_size"],
        "desc": "nft_history_list_from_cursor"
    },
    "user_token_list": {
        "queryString": "select nt.* from nft_token nt left join trader_publisher tp on nt.publisher_id = tp.id where nt.owner = ? and nt.publisher_id is not null",
        "params": ["owner"],
        "desc": "user_token_list"
    },
    "trader_publish_last_list": {
        "queryString": "select tp.*, convert(l.mbr_id, CHAR CHARACTER SET utf8) as mbr_id from trader_publisher tp join link l on tp.link_num = l.link_num where tp.id in (select MAX(tp.id) from trader_publisher tp join link l on tp.link_num = l.link_num where l.mbr_grp_id = ? group by l.link_num)",
        "params": ["mbr_grp_id"],
        "desc": "trader_publish_last_list"
    },
    "trader_publish_list": {
        "queryString": "select * from trader_publisher tp where tp.link_num = ? ORDER BY tp.id DESC LIMIT ?, ?",
        "params": ["link_no", "page_offset", "page_size"],
        "desc": "trader_publish_list"
    },
    "trader_publish_list_count": {
        "queryString": "select count(*) total from trader_publisher tp where tp.link_num = ?",
        "params": ["link_no"],
        "desc": "trader_publish_list_count"
    },
    "trader_publish_schedule_list": {
        "queryString": "select * from trader_publisher tp where tp.open_at is not null and tp.status = 'Reservation' and tp.open_at > ?",
        "params": ["open_at"],
        "desc": "trader_publish_schedule_list"
    },
    "trader_sales_sum": {
        "queryString": "select SUM(tp.sales) as sum_sales from trader_publisher tp where tp.link_num = ?",
        "params": ["link_no"],
        "desc": "trader_sales_sum"
    },
    "trader_sale_latest" : {
        "queryString": "select * from trader_publisher where link_num = (select link_num from link where mbr_grp_id=? and mbr_id =?) order by id desc limit 1",
        "params": ["mbr_grp_id","mbr_id"],
        "desc": "trader_sale_latest"
    }
}
